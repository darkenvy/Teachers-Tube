"use strict";
var core_1 = require('@angular/core');
var browser_1 = require('@angular/platform-browser/src/facade/browser');
var ReplaySubject_1 = require('rxjs/ReplaySubject');
var YoutubePlayerService = (function () {
    function YoutubePlayerService(zone) {
        this.zone = zone;
        this.isFullscreen = false;
        this.defaultSizes = {
            height: 270,
            width: 367
        };
        this.createApi();
    }
    YoutubePlayerService.prototype.createApi = function () {
        var _this = this;
        this.api = new ReplaySubject_1.ReplaySubject(1);
        var onYouTubeIframeAPIReady = function () { _this.api.next(browser_1.window.YT); };
        browser_1.window['onYouTubeIframeAPIReady'] = onYouTubeIframeAPIReady;
    };
    YoutubePlayerService.prototype.loadPlayerApi = function () {
        var doc = browser_1.window.document;
        var playerApiScript = doc.createElement("script");
        playerApiScript.type = "text/javascript";
        playerApiScript.src = "http://www.youtube.com/iframe_api";
        doc.body.appendChild(playerApiScript);
    };
    YoutubePlayerService.prototype.setupPlayer = function (elementId, outputs, sizes, videoId) {
        var _this = this;
        var createPlayer = function () {
            if (browser_1.window.YT.Player) {
                _this.createPlayer(elementId, outputs, sizes, videoId);
            }
        };
        this.api.subscribe(createPlayer);
    };
    YoutubePlayerService.prototype.play = function (player) {
        player.playVideo();
    };
    YoutubePlayerService.prototype.pause = function (player) {
        player.pauseVideo();
    };
    YoutubePlayerService.prototype.playVideo = function (media, player) {
        var id = media.id.videoId ? media.id.videoId : media.id;
        player.loadVideoById(id);
        this.play(player);
    };
    YoutubePlayerService.prototype.isPlaying = function (player) {
        // because YT is not loaded yet 1 is used - YT.PlayerState.PLAYING
        var isPlayerReady = player && player.getPlayerState;
        var playerState = isPlayerReady ? player.getPlayerState() : {};
        var isPlayerPlaying = isPlayerReady
            ? playerState !== YT.PlayerState.ENDED && playerState !== YT.PlayerState.PAUSED
            : false;
        return isPlayerPlaying;
    };
    YoutubePlayerService.prototype.createPlayer = function (elementId, outputs, sizes, videoId) {
        var _this = this;
        var service = this;
        var playerSize = {
            height: sizes.height || this.defaultSizes.height,
            width: sizes.width || this.defaultSizes.width
        };
        return new browser_1.window.YT.Player(elementId, Object.assign({}, playerSize, {
            videoId: videoId || '',
            // playerVars: playerVars,
            events: {
                onReady: function (ev) {
                    _this.zone.run(function () { return outputs.ready && outputs.ready.next(ev.target); });
                },
                onStateChange: function (ev) {
                    _this.zone.run(function () { return outputs.change && outputs.change.next(ev); });
                    // this.zone.run(() => onPlayerStateChange(ev));
                }
            }
        }));
        function onPlayerStateChange(event) {
            var state = event.data;
            // play the next song if its not the end of the playlist
            // should add a "repeat" feature
            if (state === YT.PlayerState.ENDED) {
            }
            if (state === YT.PlayerState.PAUSED) {
            }
            if (state === YT.PlayerState.PLAYING) {
            }
            // console.log('state changed', state);
            // dispatch STATE CHANGE
        }
    };
    YoutubePlayerService.prototype.toggleFullScreen = function (player, isFullScreen) {
        var _a = this.defaultSizes, height = _a.height, width = _a.width;
        if (!isFullScreen) {
            height = browser_1.window.innerHeight;
            width = browser_1.window.innerWidth;
        }
        player.setSize(width, height);
        // TODO: dispatch event
    };
    // adpoted from uid
    YoutubePlayerService.prototype.generateUniqueId = function () {
        var len = 7;
        return Math.random().toString(35).substr(2, len);
    };
    YoutubePlayerService.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    YoutubePlayerService.ctorParameters = [
        { type: core_1.NgZone, },
    ];
    return YoutubePlayerService;
}());
exports.YoutubePlayerService = YoutubePlayerService;
//# sourceMappingURL=data:application/json;base64,